@model MarkomPos.Model.ViewModel.ProductVm

<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content footerBg">
            <form method="post" action="@Url.Action("Create", "Products")">
                @Html.AntiForgeryToken()
                <div class="modal-header txtColor">
                    <h4 class="modal-title">Product</h4>
                    <button type="button" class="close txtColor" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body formBg">
                    <section class="content">
                        <div class="container-fluid">
                            <div class="row">
                                <!-- left column -->
                                <div class="col-md-12">
                                    @Html.HiddenFor(model => model.ID)
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.DisplayName, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                                    @Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="dvMain">
                                                    @Html.Label("Main Product Group", htmlAttributes: new { @class = "control-label" })
                                                    <div class="form-group">
                                                        @Html.DropDownList("mainGroup", Model.MainProductGroupVms, "Select Main Product Group", htmlAttributes: new { @class = "form-control", @onchange = "onMainChangefunc(this.value)" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="dvSub">
                                                    @Html.Label("Sub Groups", htmlAttributes: new { @class = "control-label" })
                                                    <div class="form-group">
                                                        @Html.DropDownList("subGroup", Model.SubProductGroupVms, "Select Sub Product Group", htmlAttributes: new { @class = "form-control", @onchange = "onSubChangefunc(this.value)" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ProductGroupId, "ProductGroupId", htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(m => m.ProductGroupId, Model.ProductGroups, "Select Product Group", htmlAttributes: new { @class = "form-control", required = "required" })
                                                    @Html.ValidationMessageFor(model => model.ProductGroupId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.UnitOfMeasureId, "UnitOfMeasureId", htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(m => m.UnitOfMeasureId, Model.UnitOfMeasures, "Select Unit of Measure", htmlAttributes: new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.UnitOfMeasureId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Note2, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.Note2, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.Note2, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        @*<div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group">
                                                        @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label" })
                                                        @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                                                        @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="col-md-6">

                                                </div>
                                            </div>*@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section>
                </div>
                <div class="modal-footer footerBg">
                    <button type="submit" class="btn btn-primary">Submit</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    function onMainChangefunc(val) {
        var ddlSubGroup = $("#subGroup");
        if (val != undefined && val > 0) {
            $.ajax({
                url: "/ProductGroups/GetSelectedSubGroups",
                type: 'GET',
                async: false,
                cache: false,
                data: {
                    id: val
                },
                success: function (result) {
                    ddlSubGroup.empty();
                    if (result != null && result.length > 0) {
                        ddlSubGroup.empty().append('<option selected="selected">Select Group</option>');
                        $.each(result, function () {
                            ddlSubGroup.append($("<option></option>").val(this['Value']).html(this['Text']));
                        });
                    }
                    var ddlParrentGroup = $("#ProductGroupId");
                    ddlParrentGroup.empty();
                },
                error: function () {
                    alert("error");
                }
            });
        }
    }

    function onSubChangefunc(val) {
        var ddlParrentGroup = $("#ProductGroupId");
        if (val != undefined && val > 0) {
            $.ajax({
                url: "/ProductGroups/GetSelectedBasicGroups",
                type: 'GET',
                async: false,
                cache: false,
                data: {
                    id: val
                },
                success: function (result) {
                    ddlParrentGroup.empty();
                    if (result != null && result.length > 0) {
                        ddlParrentGroup.empty().append('<option selected="selected">Select Group</option>');
                        $.each(result, function () {
                            ddlParrentGroup.append($("<option></option>").val(this['Value']).html(this['Text']));
                        });
                    }
                },
                error: function () {
                    alert("error");
                }
            });
        }
    }
</script>