@model MarkomPos.Model.ViewModel.ProductGroupVm

<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content footerBg">
            <form method="post" action="@Url.Action("Create", "ProductGroups")">
                @Html.AntiForgeryToken()
                <div class="modal-header txtColor">
                    <h4 class="modal-title">Product Groups</h4>
                    <button type="button" class="close txtColor" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body formBg">
                    <section class="content">
                        <div class="container-fluid">
                            <div class="row">
                                <!-- left column -->
                                <div class="col-md-12">
                                    @Html.HiddenFor(model => model.ID)
                                    @Html.HiddenFor(model => model.productGroupType)
                                    <div class="card-body">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.DisplayName, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                            @Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="dvMain">
                                            @Html.Label("Main Product Group", htmlAttributes: new { @class = "control-label" })
                                            <div class="form-group">
                                                @Html.DropDownList("mainGroup", Model.MainProductGroupVms, "Select Main Product Group", htmlAttributes: new { @class = "form-control", @onchange = "onMainChangefunc(this.value)" })
                                                @Html.ValidationMessageFor(model => model.ParrentGroupId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        @*<div class="dvSub">
                                                @Html.Label("Sub Groups", htmlAttributes: new { @class = "control-label" })
                                                <div class="form-group">
                                                    @Html.DropDownList("subGroup", Model.SubProductGroupVms, "Select Sub Product Group", htmlAttributes: new { @class = "form-control", @onchange = "onSubChangefunc(this.value)" })
                                                    @Html.ValidationMessageFor(model => model.ParrentGroupId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>*@
                                        <div class="parent">
                                            @Html.LabelFor(model => model.ParrentGroupId, "ParrentGroupId", htmlAttributes: new { @class = "control-label" })
                                            <div class="form-group">
                                                @Html.DropDownListFor(m => m.ParrentGroupId, Model.productGroupVms, "Select Product Group", htmlAttributes: new { @class = "form-control", @onchange = "onChangefunc(this.value)" })
                                                @Html.ValidationMessageFor(model => model.ParrentGroupId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section>
                </div>
                <div class="modal-footer footerBg">
                    <button type="submit" class="btn btn-primary">Submit</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    function onChangefunc(val) {
        if (val == "") {
            return true;
        }
        else if (val != undefined && val > 0) {
            $.ajax({
                url: "/ProductGroups/GetIsLast",
                type: 'GET',
                async: false,
                cache: false,
                data: {
                    id: val
                },
                success: function (result) {
                    if (val != null && !result) {
                        alert("Level is exceed!");
                        $('#ParrentGroupId').val("");
                        return false;
                    }
                },
                error: function () {
                    alert("error");
                }
            });
        }
        if ($('#ID').val() > 0) {
            $.ajax({
                url: "/ProductGroups/GetIsMainGroup",
                type: 'GET',
                data: {
                    id: $('#ID').val()
                },
                success: function (result) {
                    if (val != null && result) {
                        alert("You are not able to set as child because this is the main group and their has an child group!");
                        $('#ParrentGroupId').val("");
                    }
                },
                error: function () {
                    alert("error");
                }
            });
        }
    }

    function checkIsLastLEvel(val) {
        $.ajax({
            url: "/ProductGroups/GetIsLast",
            type: 'GET',
            data: {
                id: val
            },
            success: function (result) {
                if (val != null && !result) {
                    return true;
                    alert("Level is exceed!11");
                    $('#ParrentGroupId').val("");
                }
            },
            error: function () {
                alert("error");
            }
        });
    }

    function onMainChangefunc(val) {
        var ddlParrentGroup = $("#ParrentGroupId");
        if (val != undefined && val > 0) {
            $.ajax({
                url: "/ProductGroups/GetSelectedSubGroups",
                type: 'GET',
                async: false,
                cache: false,
                data: {
                    id: val
                },
                success: function (result) {
                    if (result != null && result.length > 0) {
                        ddlParrentGroup.empty().append('<option selected="selected" value="0">Select Group</option>');
                        $.each(result, function () {
                            ddlParrentGroup.append($("<option></option>").val(this['Value']).html(this['Text']));
                        });
                    }
                },
                error: function () {
                    alert("error");
                }
            });
        }
    }

    function onSubChangefunc(val) {
        var ddlParrentGroup = $("#ParrentGroupId");
        if (val != undefined && val > 0) {
            $.ajax({
                url: "/ProductGroups/GetSelectedBasicGroups",
                type: 'GET',
                async: false,
                cache: false,
                data: {
                    id: val
                },
                success: function (result) {
                    if (result != null && result.length > 0) {
                        ddlParrentGroup.empty().append('<option selected="selected" value="0">Select Group</option>');
                        $.each(result, function () {
                            ddlParrentGroup.append($("<option></option>").val(this['Value']).html(this['Text']));
                        });
                    }
                },
                error: function () {
                    alert("error");
                }
            });
        }
    }
</script>